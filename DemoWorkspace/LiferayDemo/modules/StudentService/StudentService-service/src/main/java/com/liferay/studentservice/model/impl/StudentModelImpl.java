/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.studentservice.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.studentservice.model.Student;
import com.liferay.studentservice.model.StudentModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Student service. Represents a row in the &quot;Student&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>StudentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentImpl
 * @generated
 */
@ProviderType
public class StudentModelImpl
	extends BaseModelImpl<Student> implements StudentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student model instance should use the <code>Student</code> interface instead.
	 */
	public static final String TABLE_NAME = "Student";

	public static final Object[][] TABLE_COLUMNS = {
		{"StudentID", Types.BIGINT}, {"FirstName", Types.VARCHAR},
		{"LastName", Types.VARCHAR}, {"DOB", Types.TIMESTAMP},
		{"Email", Types.VARCHAR}, {"CreatedDate", Types.TIMESTAMP},
		{"ModifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("StudentID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("FirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DOB", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("Email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CreatedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ModifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Student (StudentID LONG not null primary key,FirstName VARCHAR(75) null,LastName VARCHAR(75) null,DOB DATE null,Email VARCHAR(75) null,CreatedDate DATE null,ModifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table Student";

	public static final String ORDER_BY_JPQL =
		" ORDER BY student.StudentID ASC";

	public static final String ORDER_BY_SQL = " ORDER BY Student.StudentID ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public StudentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _StudentID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStudentID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _StudentID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Student.class;
	}

	@Override
	public String getModelClassName() {
		return Student.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Student, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Student)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Student, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Student, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Student)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Student, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Student, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Student>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Student.class.getClassLoader(), Student.class, ModelWrapper.class);

		try {
			Constructor<Student> constructor =
				(Constructor<Student>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Student, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Student, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Student, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Student, Object>>();
		Map<String, BiConsumer<Student, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Student, ?>>();

		attributeGetterFunctions.put("StudentID", Student::getStudentID);
		attributeSetterBiConsumers.put(
			"StudentID", (BiConsumer<Student, Long>)Student::setStudentID);
		attributeGetterFunctions.put("FirstName", Student::getFirstName);
		attributeSetterBiConsumers.put(
			"FirstName", (BiConsumer<Student, String>)Student::setFirstName);
		attributeGetterFunctions.put("LastName", Student::getLastName);
		attributeSetterBiConsumers.put(
			"LastName", (BiConsumer<Student, String>)Student::setLastName);
		attributeGetterFunctions.put("DOB", Student::getDOB);
		attributeSetterBiConsumers.put(
			"DOB", (BiConsumer<Student, Date>)Student::setDOB);
		attributeGetterFunctions.put("Email", Student::getEmail);
		attributeSetterBiConsumers.put(
			"Email", (BiConsumer<Student, String>)Student::setEmail);
		attributeGetterFunctions.put("CreatedDate", Student::getCreatedDate);
		attributeSetterBiConsumers.put(
			"CreatedDate", (BiConsumer<Student, Date>)Student::setCreatedDate);
		attributeGetterFunctions.put("ModifiedDate", Student::getModifiedDate);
		attributeSetterBiConsumers.put(
			"ModifiedDate",
			(BiConsumer<Student, Date>)Student::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getStudentID() {
		return _StudentID;
	}

	@Override
	public void setStudentID(long StudentID) {
		_StudentID = StudentID;
	}

	@Override
	public String getFirstName() {
		if (_FirstName == null) {
			return "";
		}
		else {
			return _FirstName;
		}
	}

	@Override
	public void setFirstName(String FirstName) {
		_FirstName = FirstName;
	}

	@Override
	public String getLastName() {
		if (_LastName == null) {
			return "";
		}
		else {
			return _LastName;
		}
	}

	@Override
	public void setLastName(String LastName) {
		_LastName = LastName;
	}

	@Override
	public Date getDOB() {
		return _DOB;
	}

	@Override
	public void setDOB(Date DOB) {
		_DOB = DOB;
	}

	@Override
	public String getEmail() {
		if (_Email == null) {
			return "";
		}
		else {
			return _Email;
		}
	}

	@Override
	public void setEmail(String Email) {
		_Email = Email;
	}

	@Override
	public Date getCreatedDate() {
		return _CreatedDate;
	}

	@Override
	public void setCreatedDate(Date CreatedDate) {
		_CreatedDate = CreatedDate;
	}

	@Override
	public Date getModifiedDate() {
		return _ModifiedDate;
	}

	@Override
	public void setModifiedDate(Date ModifiedDate) {
		_ModifiedDate = ModifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Student.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Student toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StudentImpl studentImpl = new StudentImpl();

		studentImpl.setStudentID(getStudentID());
		studentImpl.setFirstName(getFirstName());
		studentImpl.setLastName(getLastName());
		studentImpl.setDOB(getDOB());
		studentImpl.setEmail(getEmail());
		studentImpl.setCreatedDate(getCreatedDate());
		studentImpl.setModifiedDate(getModifiedDate());

		studentImpl.resetOriginalValues();

		return studentImpl;
	}

	@Override
	public int compareTo(Student student) {
		int value = 0;

		if (getStudentID() < student.getStudentID()) {
			value = -1;
		}
		else if (getStudentID() > student.getStudentID()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Student)) {
			return false;
		}

		Student student = (Student)obj;

		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Student> toCacheModel() {
		StudentCacheModel studentCacheModel = new StudentCacheModel();

		studentCacheModel.StudentID = getStudentID();

		studentCacheModel.FirstName = getFirstName();

		String FirstName = studentCacheModel.FirstName;

		if ((FirstName != null) && (FirstName.length() == 0)) {
			studentCacheModel.FirstName = null;
		}

		studentCacheModel.LastName = getLastName();

		String LastName = studentCacheModel.LastName;

		if ((LastName != null) && (LastName.length() == 0)) {
			studentCacheModel.LastName = null;
		}

		Date DOB = getDOB();

		if (DOB != null) {
			studentCacheModel.DOB = DOB.getTime();
		}
		else {
			studentCacheModel.DOB = Long.MIN_VALUE;
		}

		studentCacheModel.Email = getEmail();

		String Email = studentCacheModel.Email;

		if ((Email != null) && (Email.length() == 0)) {
			studentCacheModel.Email = null;
		}

		Date CreatedDate = getCreatedDate();

		if (CreatedDate != null) {
			studentCacheModel.CreatedDate = CreatedDate.getTime();
		}
		else {
			studentCacheModel.CreatedDate = Long.MIN_VALUE;
		}

		Date ModifiedDate = getModifiedDate();

		if (ModifiedDate != null) {
			studentCacheModel.ModifiedDate = ModifiedDate.getTime();
		}
		else {
			studentCacheModel.ModifiedDate = Long.MIN_VALUE;
		}

		return studentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Student, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Student)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Student, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Student)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Student>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _StudentID;
	private String _FirstName;
	private String _LastName;

	private Date _DOB;

	private String _Email;
	private Date _CreatedDate;
	private Date _ModifiedDate;
	private Student _escapedModel;

}